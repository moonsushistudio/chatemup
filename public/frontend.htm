<!DOCTYPE html>
    <html>
<head>
<style>
    .grid-container {
        display: grid;
        
        grid-template-columns: 1fr 1fr; /* Creates two equally sized columns */
        grid-column-gap: 7px; /* Creates a gap between columns */
        align-items: stretch; /* Makes items stretch to take up the full height of the grid row */
    }
/*        .grid-container:nth-child(1) {
            border-top: solid 2px teal;
        }
        .grid-container:nth-child(2) {
            border-top: solid 2px teal;
        }*/
        .grid-container:nth-last-child(2) {
            border-bottom: solid 2px teal;
        }
        .grid-item {
            border-left: solid 2px teal;
            border-right: solid 2px teal;
            padding: 7px; /* Some inner space */
            font-family: calibri;
        }
    .header {
        background-color: teal;
        color: ghostwhite;
        font-weight: 500;
    }
    .title{
        font-family:Calibri;
        font-size: 40pt;
        font-weight: 800;
        color: teal;
        float:left;
    }
    .clearfix {
        content: "";
        display: table;
        clear: both;
        position:absolute;
        top:93px;
    }
    #start{cursor:pointer;}
</style>
</head>
<body>
    <div style=" width:500px;">
        <div class="title">Chatem Up Pro</div><div style="float:right;">
            <!--<button id="start2">Start recording</button>
        <button id="stop" disabled>Stop recording</button>-->
            <img id="start" style="padding-top:7px;width:50px;" src="images/greenMic.png" /><img id="stop" style="cursor:pointer;padding-top: 7px; width: 50px; display: none;" src="images/redMic.png" />
        </div>
    </div>
        <div style="width:700px;" class="clearfix">
            <div class="grid-container" id="output">
                <div class="grid-item header">Translation</div><div class="grid-item header">Original</div>
            </div>
        </div>
        <script>
            // new code
            VOICE_MIN_DECIBELS = -65;
            DELAY_BETWEEN_DIALOGS = 1700;
            DIALOG_MAX_LENGTH = 60 * 1000;
            MEDIA_RECORDER = null;
            IS_RECORDING = false;

            //startRecording:
            document.getElementById('start').onclick = async function () {
                IS_RECORDING = true;
                this.style.display = 'none'; 
                document.getElementById('stop').style.display = 'block';
                record();
            };

            //stopRecording:
            document.getElementById('stop').onclick = function () {
                IS_RECORDING = false;
                this.style.display = 'none';
                document.getElementById('start').style.display = 'block';
                if (MEDIA_RECORDER !== null)
                    MEDIA_RECORDER.stop();
            };

            //record:
            function record() {
                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(stream => {

                        //start recording:
                        MEDIA_RECORDER = new MediaRecorder(stream);
                        MEDIA_RECORDER.start();
                        //save audio chunks:
                        const audioChunks = [];
                        MEDIA_RECORDER.addEventListener("dataavailable", event => {
                            audioChunks.push(event.data);
                        });

                        //analisys:
                        const audioContext = new AudioContext();
                        const audioStreamSource = audioContext.createMediaStreamSource(stream);
                        const analyser = audioContext.createAnalyser();
                        analyser.minDecibels = VOICE_MIN_DECIBELS;
                        audioStreamSource.connect(analyser);
                        const bufferLength = analyser.frequencyBinCount;
                        const domainData = new Uint8Array(bufferLength);

                        //loop:
                        let time = new Date();
                        let startTime,
                            lastDetectedTime = time.getTime();
                        let anySoundDetected = false;
                        const detectSound = () => {

                            //recording stoped by user:
                            if (!IS_RECORDING)
                                return;

                            time = new Date();
                            currentTime = time.getTime();

                            //time out:
                            if (currentTime > startTime + DIALOG_MAX_LENGTH) {
                                MEDIA_RECORDER.stop();
                                return;
                            }

                            //a dialog detected:
                            if (anySoundDetected === true &&
                                currentTime > lastDetectedTime + DELAY_BETWEEN_DIALOGS
                            ) {
                                MEDIA_RECORDER.stop();
                                return;
                            }

                            //check for detection:
                            analyser.getByteFrequencyData(domainData);
                            for (let i = 0; i < bufferLength; i++)
                                if (domainData[i] > 0) {
                                    anySoundDetected = true;
                                    time = new Date();
                                    lastDetectedTime = time.getTime();
                                }

                            //continue the loop:
                            window.requestAnimationFrame(detectSound);
                        };
                        window.requestAnimationFrame(detectSound);

                        //stop event:
                        MEDIA_RECORDER.addEventListener('stop', () => {
                            //stop all the tracks:
                            stream.getTracks().forEach(track => track.stop());
                            if (!anySoundDetected) return;

                            //send to server:
                            const audioBlob = new Blob(audioChunks, {
                                'type': 'audio/ogg; codecs=opus'
                            });

                            const formData = new FormData();
                            formData.append('audio', audioBlob);

                            fetch('/transcribe', { method: 'POST', body: formData })
                                .then(response => response.json())
                                .then(data => {
                                    console.log(data[0].content);
                                    document.getElementById('output').innerHTML += '<div class="grid-item">' + data[0].content + '</div>';
                                    document.getElementById('output').innerHTML += '<div class="grid-item">' + data[1] + '</div>';
                                })
                                .catch(error => console.error('Error:', error));


                            //start recording again:
                            record();

                        });

                    });
            }


        </script>
</body>
    </html>
